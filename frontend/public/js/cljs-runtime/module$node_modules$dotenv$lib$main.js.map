{
"version":3,
"file":"module$node_modules$dotenv$lib$main.js",
"lineCount":171,
"mappings":"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",
"sources":["node_modules/dotenv/lib/main.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dotenv$lib$main\"] = function(global,require,module,exports) {\nvar process = require('process');\nvar Buffer = require('buffer').Buffer;\nconst fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n\n};"],
"names":["shadow$provide","global","require","module","exports","_debug","message","console","log","version","_dotenvKey","options","DOTENV_KEY","length","process","env","_vaultPath","possibleVaultPath","path","Array","isArray","filepath","fs","existsSync","endsWith","resolve","cwd","_resolveHome","envPath","join","os","homedir","slice","Buffer","crypto","packageJson","LINE","DotenvModule","configDotenv","dotenvPath","encoding","debug","optionPaths","push","lastError","parsedAll","parsed","parse","readFileSync","populate","e","processEnv","error","_configVault","_parseVault","vaultPath","result","err","Error","code","keys","split","decrypted","i","key","trim","uri","URL","password","environment","searchParams","get","environmentKey","toUpperCase","ciphertext","decrypt","config","encrypted","keyStr","from","nonce","subarray","authTag","aesgcm","createDecipheriv","setAuthTag","update","final","invalidKeyLength","decryptionFailed","RangeError","src","obj","lines","toString","replace","match","exec","value","maybeQuote","override","Object","prototype","hasOwnProperty","call"]
}
