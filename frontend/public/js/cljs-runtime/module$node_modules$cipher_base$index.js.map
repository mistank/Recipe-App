{
"version":3,
"file":"module$node_modules$cipher_base$index.js",
"lineCount":85,
"mappings":"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",
"sources":["node_modules/cipher-base/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$cipher_base$index\"] = function(global,require,module,exports) {\n'use strict';\n\nvar Buffer = require('safe-buffer').Buffer;\nvar Transform = require('stream').Transform;\nvar StringDecoder = require('string_decoder').StringDecoder;\nvar inherits = require('inherits');\n\nfunction CipherBase(hashMode) {\n\tTransform.call(this);\n\tthis.hashMode = typeof hashMode === 'string';\n\tif (this.hashMode) {\n\t\tthis[hashMode] = this._finalOrDigest;\n\t} else {\n\t\tthis['final'] = this._finalOrDigest;\n\t}\n\tif (this._final) {\n\t\tthis.__final = this._final;\n\t\tthis._final = null;\n\t}\n\tthis._decoder = null;\n\tthis._encoding = null;\n}\ninherits(CipherBase, Transform);\n\nvar useUint8Array = typeof Uint8Array !== 'undefined';\nvar useArrayBuffer = typeof ArrayBuffer !== 'undefined'\n\t&& typeof Uint8Array !== 'undefined'\n\t&& ArrayBuffer.isView\n\t&& (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);\n\nfunction toBuffer(data, encoding) {\n\t/*\n\t * No need to do anything for exact instance\n\t * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed\n\t */\n\tif (data instanceof Buffer) {\n\t\treturn data;\n\t}\n\n\t// Convert strings to Buffer\n\tif (typeof data === 'string') {\n\t\treturn Buffer.from(data, encoding);\n\t}\n\n\t/*\n\t * Wrap any TypedArray instances and DataViews\n\t * Makes sense only on engines with full TypedArray support -- let Buffer detect that\n\t */\n\tif (useArrayBuffer && ArrayBuffer.isView(data)) {\n\t\t// Bug in Node.js <6.3.1, which treats this as out-of-bounds\n\t\tif (data.byteLength === 0) {\n\t\t\treturn Buffer.alloc(0);\n\t\t}\n\n\t\tvar res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n\t\t/*\n\t\t * Recheck result size, as offset/length doesn't work on Node.js <5.10\n\t\t * We just go to Uint8Array case if this fails\n\t\t */\n\t\tif (res.byteLength === data.byteLength) {\n\t\t\treturn res;\n\t\t}\n\t}\n\n\t/*\n\t * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over\n\t * Doesn't make sense with other TypedArray instances\n\t */\n\tif (useUint8Array && data instanceof Uint8Array) {\n\t\treturn Buffer.from(data);\n\t}\n\n\t/*\n\t * Old Buffer polyfill on an engine that doesn't have TypedArray support\n\t * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed\n\t * Convert to our current Buffer implementation\n\t */\n\tif (\n\t\tBuffer.isBuffer(data)\n\t\t\t&& data.constructor\n\t\t\t&& typeof data.constructor.isBuffer === 'function'\n\t\t\t&& data.constructor.isBuffer(data)\n\t) {\n\t\treturn Buffer.from(data);\n\t}\n\n\tthrow new TypeError('The \"data\" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');\n}\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n\tvar bufferData = toBuffer(data, inputEnc); // asserts correct input type\n\tvar outData = this._update(bufferData);\n\tif (this.hashMode) {\n\t\treturn this;\n\t}\n\n\tif (outputEnc) {\n\t\toutData = this._toString(outData, outputEnc);\n\t}\n\n\treturn outData;\n};\n\nCipherBase.prototype.setAutoPadding = function () {};\nCipherBase.prototype.getAuthTag = function () {\n\tthrow new Error('trying to get auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAuthTag = function () {\n\tthrow new Error('trying to set auth tag in unsupported state');\n};\n\nCipherBase.prototype.setAAD = function () {\n\tthrow new Error('trying to set aad in unsupported state');\n};\n\nCipherBase.prototype._transform = function (data, _, next) {\n\tvar err;\n\ttry {\n\t\tif (this.hashMode) {\n\t\t\tthis._update(data);\n\t\t} else {\n\t\t\tthis.push(this._update(data));\n\t\t}\n\t} catch (e) {\n\t\terr = e;\n\t} finally {\n\t\tnext(err);\n\t}\n};\nCipherBase.prototype._flush = function (done) {\n\tvar err;\n\ttry {\n\t\tthis.push(this.__final());\n\t} catch (e) {\n\t\terr = e;\n\t}\n\n\tdone(err);\n};\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n\tvar outData = this.__final() || Buffer.alloc(0);\n\tif (outputEnc) {\n\t\toutData = this._toString(outData, outputEnc, true);\n\t}\n\treturn outData;\n};\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n\tif (!this._decoder) {\n\t\tthis._decoder = new StringDecoder(enc);\n\t\tthis._encoding = enc;\n\t}\n\n\tif (this._encoding !== enc) {\n\t\tthrow new Error('can\u2019t switch encodings');\n\t}\n\n\tvar out = this._decoder.write(value);\n\tif (fin) {\n\t\tout += this._decoder.end();\n\t}\n\n\treturn out;\n};\n\nmodule.exports = CipherBase;\n\n};"],
"names":["shadow$provide","global","require","module","exports","CipherBase","hashMode","Transform","call","_finalOrDigest","_final","__final","_encoding","_decoder","toBuffer","data","encoding","Buffer","from","useArrayBuffer","ArrayBuffer","isView","byteLength","alloc","res","buffer","byteOffset","useUint8Array","Uint8Array","isBuffer","constructor","TypeError","StringDecoder","inherits","prototype","TYPED_ARRAY_SUPPORT","update","CipherBase.prototype.update","inputEnc","outputEnc","bufferData","outData","_update","_toString","setAutoPadding","CipherBase.prototype.setAutoPadding","getAuthTag","CipherBase.prototype.getAuthTag","Error","setAuthTag","CipherBase.prototype.setAuthTag","setAAD","CipherBase.prototype.setAAD","_transform","CipherBase.prototype._transform","_","next","push","e","err","_flush","CipherBase.prototype._flush","done","CipherBase.prototype._finalOrDigest","CipherBase.prototype._toString","value","enc","fin","out","write","end"]
}
