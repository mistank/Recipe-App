{"version":3,"sources":["cljss/utils.cljc"],"mappings":";AAGS,AAAKA,yBAAcC;AAE5B,4BAAA,oCAAAC,hEAAMG;AAAN,AAAA,IAAAF,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAgBG;YAAhB,AAAAF,4CAAAD,WAAA,IAAA,nEAAqBI;AAArB,AACE,IAAAC,oBAAK,qBAAA,rBAACC,4BAAmB,AAACC,eAAKJ;AAA/B,AAAA,oBAAAE;AACK,OAACG,qBAAKJ;;AADXC;;;AAGF,4BAAA,oCAAAI,hEAAME;AAAN,AAAA,IAAAD,aAAAD;WAAA,AAAAR,4CAAAS,WAAA,IAAA,lEAAgBP;YAAhB,AAAAF,4CAAAS,WAAA,IAAA,nEAAqBN;AAArB,AACE,SAAK,OAASD,uBACT,AAACK,qBAAKJ;;AAEb,6BAAA,7BAAMQ,kEAAUC;AAAhB,AACE,SAAI,OAASA,oBAAG,OAASA;;AAE3B,yBAAA,zBAAMC,0DAAYX,KAAKY;AAAvB,AACE,GAAI,kDAAA,lDAACC,6CAAEb;AACL,OAACc,wGAAOF;;AACRA;;;AAEJ,wBAAA,xBAAMG,wDAAWC,IAAIC;AAArB,AAIO,OAAA,WAAAK;AAAA,AAAE,QAAA,qDAAA,gDAAAA,kBAAA,vEAASN;wDAFX,AAACE,4CAAI,WAAAC,5GACL,kDAAA,lDAACE;AADI,AAAA,IAAAD,aAAAD;WAAA,AAAArB,4CAAAsB,WAAA,IAAA,lEAAMpB;UAAN,AAAAF,4CAAAsB,WAAA,IAAA,jEAAWR;AAAX,AAAiB,6BAAA,kFAAA,vGAAK,AAACR,eAAKJ,sDAAU,AAACW,uBAAWX,KAAKY;GAD5DK;;AAKP,+BAAA,uCAAAM,tEAAME;AAAN,AAAA,IAAAD,aAAAD;WAAA,AAAAzB,4CAAA0B,WAAA,IAAA,lEAAyBxB;UAAzB,AAAAF,4CAAA0B,WAAA,IAAA,jEAA8BZ;AAA9B,AACE,QAAA,JAAMc,uFAAG,sBAAA,rBAAK,AAACtB,eAAKJ;IACd0B,QAAE,EAAI,AAACC,wBAAQf,MACX,AAACgB,6CAAKF,EAAEd,KACR,AAACiB,6CAAKH,EAAEd;AAHlB,AAIE,0DAAA,nDAACiB,6CAAKH;;AAEV,yBAAA,zBAAMI,0DAAYC;AAAlB,AACE,yBACK,AAACC,+CACC,WAAKD,MAAEE,lFAOTO;AAPE,AACE,IAAMN,KAAG,AAACC,gBAAMJ;IACVK,QAAM,AAACC,eAAKN;AADlB,AAEE,GAAI,EAAK,AAACtB,2BAASwB,SAAI,OAASC;AAC9B,OAACI,eAAK,6CAAKJ,gDAAGD,cAAIG;;AAClB,OAACE,eAAKL,GAAGF;;+CAPjBA,5CAQE,KAAAQ,eAAA,KAAA,GAAA,KAAA,IAAA","names":["cljss.utils/dev?","js/goog.DEBUG","p__11939","vec__11940","cljs.core.nth","cljss.utils/pseudo?","rule","value","and__5000__auto__","cljs.core/re-matches","cljs.core/name","cljs.core/map?","p__11943","vec__11944","cljss.utils/nested?","cljss.utils/literal?","x","cljss.utils/escape-val","val","cljs.core._EQ_","cljs.core.pr_str","cljss.utils/build-css","cls","styles","cljs.core.map","p__11948","vec__11949","clojure.string.join","p1__11947#","p__11952","vec__11953","cljss.utils/compile-css-rule","r","cljs.core/vector?","cljs.core.into","cljs.core.conj","cljss.utils/reduce-str","s","cljs.core.reduce","s1","s0","cljs.core/first","srest","cljs.core/rest","cljs.core/cons","cljs.core/List","cljs.core/reverse"],"sourcesContent":["(ns cljss.utils\n  (:require [clojure.string :as cstr]))\n\n#?(:cljs (def dev? ^boolean goog.DEBUG))\n\n(defn pseudo? [[rule value]]\n  (and (re-matches #\"&:.*\" (name rule))\n       (map? value)))\n\n(defn nested? [[rule value]]\n  (and (string? rule)\n       (map? value)))\n\n(defn literal? [x]\n  (or (string? x) (number? x)))\n\n(defn escape-val [rule val]\n  (if (= rule :content)\n    (pr-str val)\n    val))\n\n(defn build-css [cls styles]\n  (->> styles\n       (map (fn [[rule val]] (str (name rule) \":\" (escape-val rule val) \";\")))\n       (cstr/join \"\")\n       (#(str \".\" cls \"{\" % \"}\"))))\n\n(defn compile-css-rule [[rule val]]\n  (let [r [(str (name rule) \":\")]\n        r (if (vector? val)\n            (into r val)\n            (conj r val))]\n    (conj r \";\")))\n\n(defn reduce-str [s]\n  (->> s\n       (reduce\n         (fn [s s1]\n           (let [s0 (first s)\n                 srest (rest s)]\n             (if (and (literal? s1) (string? s0))\n               (cons (str s0 s1) srest)\n               (cons s1 s))))\n         (list \"\"))\n       reverse))\n\n#?(:clj\n   (defn resolve-get\n     \"Tries to resolve a var and get its value. Returns the symbol if failed.\"\n     [sym]\n     (try\n       (var-get (resolve sym))\n       (catch Exception e\n         sym))))\n"],"x_google_ignoreList":[0]}