{"version":3,"sources":["cljss/core.cljs"],"mappings":"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","names":["cljss.core/sheets","cljs.core.atom","cljs.core/List","cljss.sheet/create-sheet","cljss.core/remove-styles!","cljs.core/deref","cljs.core/run!","cljss.sheet/flush!","cljs.core/reset!","cljss.core/css","cls","static","vars","sheet","cljs.core/first","cljss.sheet/filled?","cljs.core.swap_BANG_","cljs.core/conj","G__11964","vec__11965","seq__11966","cljs.core/seq","first__11967","cljs.core/next","vec__11971","seq__11972","first__11973","s","idx","cljss.sheet/insert!","cljs.core/empty?","cljs.core/count","var-cls","cljs.core/hash","cljss.utils/build-css","cljss.core/css-keyframes","inner","cljs.core.reduce","p__11974","vec__11975","cljs.core.nth","id","val","clojure.string/replace","anim-name","keyframes","cljss.core/-camel-case","k","cljs.core/Keyword","cljs.core/Symbol","vec__11978","seq__11979","first__11980","first-word","words","clojure.string.split","cljs.core/name","cljs.core._EQ_","cljs.core.map","clojure.string/capitalize","cljs.core.conj","clojure.string.join","cljs.core.keyword","cljss.core/-compile-class-name","props","className","cljs.core/select-keys","cljs.core/vals","cljs.core.filter","cljs.core/identity","cljss.core/-mk-var-class","p__11982","vec__11983","v","and__5000__auto__","cljs.core/ifn?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","cljs.core/meta","cljs.core/flatten","p1__11981#","cljs.core.get","cljs.core.apply","cljss.core/-meta-attrs","cljs.core/second","p1__11987#","cljs.core/set","cljss.core/-camel-case-attrs","cljs.core/reduce-kv","m","G__11989","cljs.core.assoc","cljss.core/-styled","attrs","create-element","clsn","cljs.core.gensym","cljss.utils/dev?","p1__11990#","p__11991","vec__11992","children","vec__11995","cljs.core/map?","cljs.core/array","var-class","meta-attrs","cljs.core/dissoc","cljs.core.concat"],"sourcesContent":["(ns cljss.core\n  (:require [cljss.sheet :refer [create-sheet insert! filled? flush!]]\n            [cljss.utils :refer [build-css dev?]]\n            [clojure.string :as cstr]))\n\n(def ^:private sheets (atom (list (create-sheet))))\n\n(defn remove-styles! []\n  (run! flush! @sheets)\n  (reset! sheets (list (create-sheet))))\n\n(defn css\n  \"Takes class name, static styles and dynamic styles.\n   Injects styles and returns a string of generated class names.\"\n  [cls static vars]\n  (let [static (if (string? static) [static] static)\n        sheet (first @sheets)]\n    (if (filled? sheet)\n      (do\n        (swap! sheets conj (create-sheet))\n        (css cls static vars))\n      (do\n        (loop [[s & static] static\n               idx 0]\n          (let [cls (str cls \"-\" idx)]\n            (insert! sheet s cls)\n            (when-not (empty? static)\n              (recur static (inc idx)))))\n        (if (pos? (count vars))\n          (let [var-cls (str \"vars-\" (hash vars))]\n            (insert! sheet #(build-css var-cls vars) var-cls)\n            (str cls \" \" var-cls))\n          cls)))))\n\n(defn css-keyframes\n  \"Takes CSS animation name, static styles and dynamic styles.\n   Injects styles and returns generated CSS animation name.\"\n  [cls static vars]\n  (let [sheet (first @sheets)]\n    (if (filled? sheet)\n      (do\n        (swap! sheets conj (create-sheet))\n        (css-keyframes cls static vars))\n      (let [inner\n            (reduce\n              (fn [s [id val]] (cstr/replace s id val))\n              static\n              vars)\n            anim-name (str \"animation-\" cls \"-\" (hash vars))\n            keyframes (str \"@keyframes \" anim-name \"{\" inner \"}\")]\n        (insert! sheet keyframes anim-name)\n        anim-name))))\n\n;; ==============================\n(defn -camel-case [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (cstr/split (name k) #\"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map cstr/capitalize words)\n            (conj first-word)\n            cstr/join\n            keyword)))\n    k))\n\n(defn -compile-class-name [props]\n  (let [className\n        (-> props\n            (select-keys [:className :class :class-name])\n            vals\n            (->> (filter identity)))]\n    (when-not (empty? className)\n      (str (clojure.string/join \" \" className) \" \"))))\n\n(defn -mk-var-class [props vars cls static]\n  (->> vars\n       (map (fn [[cls v]]\n              (cond\n                (and (ifn? v) (satisfies? IWithMeta v))\n                (->> v meta list flatten (map #(get props % nil)) (apply v) (list cls))\n\n                (ifn? v)\n                (list cls (v props))\n\n                :else (list cls v))))\n       (css cls static)))\n\n(defn -meta-attrs [vars]\n  (->> vars\n       (map second)\n       (filter #(satisfies? IWithMeta %))\n       (map meta)\n       flatten\n       set))\n\n(defn -camel-case-attrs [props]\n  (reduce-kv\n    (fn [m k v]\n      (let [k (case k\n                :for :htmlFor\n                (-camel-case k))]\n        (assoc m k v)))\n    {}\n    props))\n\n(defn -styled [cls static vars attrs create-element]\n  (let [clsn (str cls \"-\" (gensym))\n        static (if ^boolean dev?\n                 (map #(cstr/replace % cls clsn) static)\n                 static)\n        vars (if ^boolean dev?\n               (->> vars (map (fn [[k v]] [(cstr/replace k cls clsn) v])))\n               vars)\n        cls (if ^boolean dev? clsn cls)]\n    (fn [props & children]\n      (let [[props children] (if (map? props)\n                               (array props children)\n                               (array {} (apply array props children)))\n            var-class (-mk-var-class props vars cls static)\n            meta-attrs (-meta-attrs vars)\n            className (str (-compile-class-name props) var-class)\n            props (-> (apply dissoc props (concat attrs meta-attrs [:class :class-name :className]))\n                      (assoc :className className)\n                      -camel-case-attrs)]\n        (create-element props children)))))\n"],"x_google_ignoreList":[0]}