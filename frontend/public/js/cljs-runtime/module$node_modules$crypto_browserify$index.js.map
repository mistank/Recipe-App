{
"version":3,
"file":"module$node_modules$crypto_browserify$index.js",
"lineCount":50,
"mappings":"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",
"sources":["node_modules/crypto-browserify/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_browserify$index\"] = function(global,require,module,exports) {\n'use strict';\n\n// eslint-disable-next-line no-multi-assign\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');\n\n// eslint-disable-next-line no-multi-assign\nexports.createHash = exports.Hash = require('create-hash');\n\n// eslint-disable-next-line no-multi-assign\nexports.createHmac = exports.Hmac = require('create-hmac');\n\nvar algos = require('browserify-sign/algos');\nvar algoKeys = Object.keys(algos);\nvar hashes = [\n\t'sha1',\n\t'sha224',\n\t'sha256',\n\t'sha384',\n\t'sha512',\n\t'md5',\n\t'rmd160'\n].concat(algoKeys);\n\nexports.getHashes = function () {\n\treturn hashes;\n};\n\nvar p = require('pbkdf2');\nexports.pbkdf2 = p.pbkdf2;\nexports.pbkdf2Sync = p.pbkdf2Sync;\n\nvar aes = require('browserify-cipher');\n\nexports.Cipher = aes.Cipher;\nexports.createCipher = aes.createCipher;\nexports.Cipheriv = aes.Cipheriv;\nexports.createCipheriv = aes.createCipheriv;\nexports.Decipher = aes.Decipher;\nexports.createDecipher = aes.createDecipher;\nexports.Decipheriv = aes.Decipheriv;\nexports.createDecipheriv = aes.createDecipheriv;\nexports.getCiphers = aes.getCiphers;\nexports.listCiphers = aes.listCiphers;\n\nvar dh = require('diffie-hellman');\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup;\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;\nexports.getDiffieHellman = dh.getDiffieHellman;\nexports.createDiffieHellman = dh.createDiffieHellman;\nexports.DiffieHellman = dh.DiffieHellman;\n\nvar sign = require('browserify-sign');\n\nexports.createSign = sign.createSign;\nexports.Sign = sign.Sign;\nexports.createVerify = sign.createVerify;\nexports.Verify = sign.Verify;\n\nexports.createECDH = require('create-ecdh');\n\nvar publicEncrypt = require('public-encrypt');\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt;\nexports.privateEncrypt = publicEncrypt.privateEncrypt;\nexports.publicDecrypt = publicEncrypt.publicDecrypt;\nexports.privateDecrypt = publicEncrypt.privateDecrypt;\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// [\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error('sorry, ' + name + ' is not implemented yet\\nwe accept pull requests\\nhttps://github.com/browserify/crypto-browserify');\n//   };\n// });\n\nvar rf = require('randomfill');\n\nexports.randomFill = rf.randomFill;\nexports.randomFillSync = rf.randomFillSync;\n\nexports.createCredentials = function () {\n\tthrow new Error('sorry, createCredentials is not implemented yet\\nwe accept pull requests\\nhttps://github.com/browserify/crypto-browserify');\n};\n\nexports.constants = {\n\tDH_CHECK_P_NOT_SAFE_PRIME: 2,\n\tDH_CHECK_P_NOT_PRIME: 1,\n\tDH_UNABLE_TO_CHECK_GENERATOR: 4,\n\tDH_NOT_SUITABLE_GENERATOR: 8,\n\tNPN_ENABLED: 1,\n\tALPN_ENABLED: 1,\n\tRSA_PKCS1_PADDING: 1,\n\tRSA_SSLV23_PADDING: 2,\n\tRSA_NO_PADDING: 3,\n\tRSA_PKCS1_OAEP_PADDING: 4,\n\tRSA_X931_PADDING: 5,\n\tRSA_PKCS1_PSS_PADDING: 6,\n\tPOINT_CONVERSION_COMPRESSED: 2,\n\tPOINT_CONVERSION_UNCOMPRESSED: 4,\n\tPOINT_CONVERSION_HYBRID: 6\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","randomBytes","rng","pseudoRandomBytes","prng","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","exports.getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","exports.createCredentials","Error","constants","DH_CHECK_P_NOT_SAFE_PRIME","DH_CHECK_P_NOT_PRIME","DH_UNABLE_TO_CHECK_GENERATOR","DH_NOT_SUITABLE_GENERATOR","NPN_ENABLED","ALPN_ENABLED","RSA_PKCS1_PADDING","RSA_SSLV23_PADDING","RSA_NO_PADDING","RSA_PKCS1_OAEP_PADDING","RSA_X931_PADDING","RSA_PKCS1_PSS_PADDING","POINT_CONVERSION_COMPRESSED","POINT_CONVERSION_UNCOMPRESSED","POINT_CONVERSION_HYBRID"]
}
