{"version":3,"sources":["recipe_app/components/list/list.cljs"],"mappings":";AAMA,8CAAA,9CAAMA;AAAN,AACE,IAAMC,UAAQ,AAAA,yFAAA,AAAAC,gBAAWC;AAAzB,AAAA,0FAAA,mDAAA,2CAAA,uDACgBC,qDACb,0BAAA,mFAAA,3GAAI,AAACC,cAAIJ,+IAEN,iBAAAK,qBAAA,oEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAJ,cAAAE;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBA08E2C,AAAAkB,sBAAAtB;IA18E3CK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,aAAA,AAAAK,eAAAN,gBAAAK,xCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,oBAAA,mFAAA,gDAAA,2CAAA,mHAAA,mFAAA,oJAAA,mFAAA,8CAAA,kMAAA,2CAAA,oDACS,AAAA,gFAAKY,rxBAAsBC,gMACP,AAAA,mFAAOD,iKACQ,kDAAA,lDAACE,uDAAyB,AAAA,kGAAcF;;AAHpF,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,0DAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,aAAA,AAAAS,gBAAAhB,zBAAMmB;AAAN,AAAA,OAAAF,eAAA,oBAAA,mFAAA,gDAAA,2CAAA,mHAAA,mFAAA,oJAAA,mFAAA,8CAAA,kMAAA,2CAAA,qJAAA,AAAAH,0DAAA,AAAAI,eAAAlB,1KACS,AAAA,gFAAKmB,rxBAAsBC,gMACP,AAAA,mFAAOD,iKACQ,kDAAA,lDAACE,uDAAyB,AAAA,kGAAcF;;;AAHpF;;;;GAAA,KAAA;;AAAA,AAAA,OAAApB,mBAAaL;aAFhB,mFAAA,8CAAA","names":["recipe-app.components.list.list/recipe-list","recipes","cljs.core/deref","state/app-state","recipe-app.components.list.styles/list-style","cljs.core/seq","iter__5480__auto__","s__22952","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__22954","cljs.core/chunk-buffer","i__22953","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__22951","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","recipe","recipe-app.components.list.styles/recipe-item-style","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns recipe-app.components.list.list\n  (:require [state :refer [app-state]]\n            [recipe-app.components.list.styles :refer [list-style recipe-item-style]]\n            [clojure.string :as clojure.string]\n            ))\n\n(defn recipe-list []\n  (let [recipes (:recipes @app-state)]\n    [:div {:style list-style}\n     (if (seq recipes)\n       [:ul\n        (for [recipe recipes]\n          ^{:key (:id recipe)} [:li {:style recipe-item-style}\n                                [:h3 (:name recipe)]\n                                [:p \"Ingredients: \" (clojure.string/join \", \" (:ingredients recipe))]])]\n       [:p \"No recipes found. Add ingredients and click 'Find Recipes'!\"])]))\n"]}